(window.webpackJsonp=window.webpackJsonp||[]).push([[272],{670:function(e,t,v){"use strict";v.r(t);var _=v(27),r=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"设计注意事项"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计注意事项"}},[e._v("#")]),e._v(" 设计注意事项")]),e._v(" "),v("p",[e._v("要使用任何脚本编写适合任何语言的无缝代码，需要记住几件事。")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("考虑：避免使用 "),v("code",[e._v("char")]),e._v(" 数据类型的方法。")]),e._v(" "),v("p",[e._v("避免使用 char 原语数据类型或使用 char 数据类型的方法，因为使用该数据类型的代码不能用于补充字符。对于采用 char 类型参数的方法，在可能的情况下使用对应的 int 方法。例如，使用 "),v("code",[e._v("Character.isDigit(int)")]),e._v(" 方法而不是 "),v("code",[e._v("Character.isDigit(char)")]),e._v(" 方法。")])]),e._v(" "),v("li",[v("p",[e._v("考虑：使用该 "),v("code",[e._v("isValidCodePoint")]),e._v(" 方法来验证码点值。")]),e._v(" "),v("p",[e._v("码点被定义为 int 数据类型，允许在从 0x0000 到 0x10FFFF 的码点值有效范围之外的值。出于性能原因，采用码点值作为参数的方法不检查参数的有效性，但是您可以使用 isValidCodePoint 方法检查该值。")])]),e._v(" "),v("li",[v("p",[e._v("考虑：使用 "),v("code",[e._v("codePointCount")]),e._v(" 方法对字符进行计数。")]),e._v(" "),v("p",[v("code",[e._v("length()")]),e._v(" 方法返回字符串中的代码单元数或 16 位字符值。如果字符串包含补充字符，计数可能会引起误解，因为它不能反映真实的码点数量。要获得字符数(包括补充字符)的准确计数，请使用 codePointCount 方法。")])]),e._v(" "),v("li",[v("p",[e._v("考虑：使用")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("String.toUpperCase(int codePoint)")])]),e._v(" "),v("li",[v("code",[e._v("String.toLowerCase(int codePoint)")])]),e._v(" "),v("li",[v("code",[e._v("Character.toUpperCase(int codePoint)")])]),e._v(" "),v("li",[v("code",[e._v("Character.toLowerCase(int codePoint)")])])]),e._v(" "),v("p",[e._v("原因：虽然 "),v("code",[e._v("Character.toUpperCase(int)")]),e._v(" 和 "),v("code",[e._v("Character.toLowerCase(int)")]),e._v("  方法可以处理代码点值，但是有些字符不能一对一地转换。例如，小写的德语字符 「ß」在转换为大写时就变成了两个字符「SS」。\n同样的，小的希腊字符也会因在弦中的位置而不同。"),v("code",[e._v("Character.toUpperCase(int)")]),e._v(" 和"),v("code",[e._v("Character.toLowerCase(int)")]),e._v(" 方法不能处理这些类型的问题;")]),e._v(" "),v("p",[e._v("然而： "),v("code",[e._v("String.toUpperCase")]),e._v(" 和 "),v("code",[e._v("String.toLowerCase")]),e._v(" 方法可以正确处理这些情况。")])]),e._v(" "),v("li",[v("p",[e._v("考虑：删除字符时要小心")]),e._v(" "),v("p",[e._v("当调用索引指向补充字符的 "),v("code",[e._v("StringBuilder.deleteCharAt(int index)")]),e._v(" 或 "),v("code",[e._v("StringBuffer.deleteCharAt(int index)")]),e._v(" 方法时，只删除该字符的前半部分(第一个 char 值)。\n首先，调用 "),v("code",[e._v("Character.charCount")]),e._v(" 方法确定要删除几个索引")])]),e._v(" "),v("li",[v("p",[e._v("考虑：在序列中反转字符时要小心")]),e._v(" "),v("p",[e._v("在对包含补充字符的文本调用 "),v("code",[e._v("StringBuffer.reverse()")]),e._v(" 或 "),v("code",[e._v("StringBuilder.reverse()")]),e._v(" 方法时，由于补充字符由两个 char 组成，那么将会颠倒他们，组成的值就是错误的，代理对")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);